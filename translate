import requests
from bs4 import BeautifulSoup

## Criando uma conexão com a URL e formatando Texto
def extract_text_from_url(url):
    response = requests.get(url)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        for script_or_style in soup(['script', 'style']):
            script_or_style.decompose()
        texto = soup.get_text(separator= ' ')
        #Limpar texto
        linhas = (line.strip() for line in texto.splitlines())
        parts = (phrase.strip() for line in linhas for phrase in line.split(" "))
        texto_limpo = '/n'.join(part for part in parts if part)
        return texto_limpo
    else:
        print(f"Falha na resposta de consulta URL. Status Code: {response.status_code}")
        return None
    
    text = soup.get_text()
    return text

## Testando a extração
url = "https://dev.to/kenakamu/azure-open-ai-in-vnet-3alo"
extract_text_from_url(url)

## Utilizando a inteligência Virtual Azure para a tradução do Texto

from langchain_openai.chat_models.azure import AzureChatOpenAI

client = AzureChatOpenAI(
    azure_endpoint="https://oai-dio-xxxxxx-xxx-xxxxx-xxxx.openai.azure.com/", # preservação de dados
    api_key="-------------------------------------------------", # preservação de dados
    api_version= "2024-02-15-preview",
    deployment_name = "gpt-4o-mini",
    max_retries=0
)

def translate_articles(text,lang):
    messages = [
        ("system" , "Você atua como tradutor de textos"),
        ("user" , f"Traduza o {text} para o idiom, a {lang} e responda em markdown")
    ]
    
    response = client.invoke(messages)
    print(response.content)
    return response.content

translate_articles("GPT models are hosted in multiple service vendor at the moment", "portugues")

## Parãmetros e funções para a solução

url = "https://dev.to/kenakamu/azure-open-ai-in-vnet-3alo"
text = extract_text_from_url(url)
article = translate_articles(text, "pt-br")

print(article)
